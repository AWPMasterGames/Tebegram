#nullable disable
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Net.Http.Headers;
using Tebegrammmm.ChatsFoldersRedactsWindows;
using Tebegrammmm.Classes;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Media;

namespace Tebegrammmm
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è MessengerWindow.xaml
    /// </summary>
    public partial class MessengerWindow : Window
    {
        static HttpClient httpClient = new HttpClient();
        string serverAdress = GetServerAddress(); // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        private static object thisLock = new();
        User User { get; set; }
        Contact Contact { get; set; }

        HttpListener httpListener = null;
        Thread Thread { get; set; }
        bool IsRunning { get; set; }
        private string lastSelectedContactName = "";
        private System.Timers.Timer tunnelCheckTimer;
        private Process localtunnelProcess;

        public MessengerWindow(User user)
        {
            DateTime constructorStartTime = DateTime.Now;
            Log.Save($"[MessengerWindow] üèóÔ∏è –°–¢–ê–†–¢ –ö–û–ù–°–¢–†–£–ö–¢–û–†–ê: {constructorStartTime:HH:mm:ss.fff}");
            
            DateTime initStartTime = DateTime.Now;
            InitializeComponent();
            DateTime initEndTime = DateTime.Now;
            TimeSpan initDuration = initEndTime - initStartTime;
            Log.Save($"[MessengerWindow] üé® InitializeComponent() –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {initDuration.TotalMilliseconds}ms");
            
            DateTime styleStartTime = DateTime.Now;
            LoadStyle();
            DateTime styleEndTime = DateTime.Now;
            TimeSpan styleDuration = styleEndTime - styleStartTime;
            Log.Save($"[MessengerWindow] üé≠ LoadStyle() –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {styleDuration.TotalMilliseconds}ms");
            
            GridMessege.Visibility = Visibility.Hidden;
            GridContactPanel.Visibility = Visibility.Hidden;
            Log.Save($"[MessengerWindow] üëÅÔ∏è –ü–∞–Ω–µ–ª–∏ —Å–∫—Ä—ã—Ç—ã (GridMessege, GridContactPanel)");
            
            this.User = user;
            Log.Save($"[MessengerWindow] üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user.Name}");
            Log.Save($"[MessengerWindow] üÜî ID: {user.Id}");
            Log.Save($"[MessengerWindow] üîë Login: {user.Login}");
            Log.Save($"[MessengerWindow] üåê IP: {user.IpAddress}");
            Log.Save($"[MessengerWindow] üîå Port: {user.Port}");
            Log.Save($"[MessengerWindow] üìÅ –ü–∞–ø–æ–∫ —á–∞—Ç–æ–≤: {user.ChatsFolders?.Count ?? 0}");

            DateTime uiSetupStartTime = DateTime.Now;
            LBChatsLoders.ItemsSource = User.ChatsFolders;
            LBChatsLoders.SelectedIndex = 0;
            DateTime uiSetupEndTime = DateTime.Now;
            TimeSpan uiSetupDuration = uiSetupEndTime - uiSetupStartTime;
            Log.Save($"[MessengerWindow] üìã UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (ListBox) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {uiSetupDuration.TotalMilliseconds}ms");

            Log.Save($"[MessengerWindow] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º LocalTunnel...");
            DateTime localtunnelStartTime = DateTime.Now;
            // –ó–∞–ø—É—Å–∫–∞–µ–º localtunnel –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
            StartLocaltunnel();
            DateTime localtunnelEndTime = DateTime.Now;
            TimeSpan localtunnelDuration = localtunnelEndTime - localtunnelStartTime;
            Log.Save($"[MessengerWindow] üåê StartLocaltunnel() –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {localtunnelDuration.TotalMilliseconds}ms");

            Log.Save($"[MessengerWindow] üëÇ –ó–∞–ø—É—Å–∫–∞–µ–º Listener...");
            DateTime listenerStartTime = DateTime.Now;
            StartListener();
            DateTime listenerEndTime = DateTime.Now;
            TimeSpan listenerDuration = listenerEndTime - listenerStartTime;
            Log.Save($"[MessengerWindow] üéß StartListener() –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {listenerDuration.TotalMilliseconds}ms");

            Log.Save($"[MessengerWindow] üßµ –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...");
            DateTime threadStartTime = DateTime.Now;
            Thread = new Thread(new ThreadStart(ReceiveMessage));
            Thread.Start();
            DateTime threadEndTime = DateTime.Now;
            TimeSpan threadDuration = threadEndTime - threadStartTime;
            Log.Save($"[MessengerWindow] üèÉ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω –∑–∞ {threadDuration.TotalMilliseconds}ms");
            Log.Save($"[MessengerWindow] üÜî ID –ø–æ—Ç–æ–∫–∞: {Thread.ManagedThreadId}");
            Log.Save($"[MessengerWindow] üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞: {Thread.ThreadState}");
            
            Log.Save($"[MessengerWindow] üìö –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...");
            DateTime historyStartTime = DateTime.Now;
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
            _ = LoadMessageHistoryAsync();
            DateTime historyEndTime = DateTime.Now;
            TimeSpan historyDuration = historyEndTime - historyStartTime;
            Log.Save($"[MessengerWindow] üìñ LoadMessageHistoryAsync() –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∑–∞ {historyDuration.TotalMilliseconds}ms");
            
            Log.Save($"[MessengerWindow] üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç...");
            DateTime lastContactStartTime = DateTime.Now;
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            string lastContact = LoadLastSelectedContact();
            DateTime lastContactEndTime = DateTime.Now;
            TimeSpan lastContactDuration = lastContactEndTime - lastContactStartTime;
            Log.Save($"[MessengerWindow] üë• LoadLastSelectedContact() –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {lastContactDuration.TotalMilliseconds}ms");
            
            if (!string.IsNullOrEmpty(lastContact))
            {
                lastSelectedContactName = lastContact;
                Log.Save($"[MessengerWindow] ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lastContact}");
            }
            else
            {
                Log.Save($"[MessengerWindow] ‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç");
            }
            
            DateTime constructorEndTime = DateTime.Now;
            TimeSpan totalConstructorDuration = constructorEndTime - constructorStartTime;
            Log.Save($"[MessengerWindow] üèÅ –ö–û–ù–°–¢–†–£–ö–¢–û–† –ó–ê–í–ï–†–®–ï–ù –∑–∞ {totalConstructorDuration.TotalMilliseconds}ms");
            Log.Save($"[MessengerWindow] ‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {constructorEndTime:HH:mm:ss.fff}");
        }

        private void StartLocaltunnel()
        {
            try
            {
                DateTime startTime = DateTime.Now;
                Log.Save($"[StartLocaltunnel] ‚è±Ô∏è –°–¢–ê–†–¢ –ó–ê–ü–£–°–ö–ê LOCALTUNNEL: {startTime:HH:mm:ss.fff}");
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
                string currentDir = Directory.GetCurrentDirectory();
                string baseDir = AppDomain.CurrentDomain.BaseDirectory;
                Log.Save($"[StartLocaltunnel] üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {currentDir}");
                Log.Save($"[StartLocaltunnel] üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {baseDir}");
                
                // –ë–∞—Ç–Ω–∏–∫ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–ø–∫–µ
                string serverFolder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "TebegramServer", "TebegramServer");
                string batchPath = Path.Combine(serverFolder, "start_localtunnel.bat");
                string fullBatchPath = Path.GetFullPath(batchPath);
                
                Log.Save($"[StartLocaltunnel] üéØ –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –∫ batch-—Ñ–∞–π–ª—É: {fullBatchPath}");
                Log.Save($"[StartLocaltunnel] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏...");
                
                bool mainPathExists = File.Exists(fullBatchPath);
                Log.Save($"[StartLocaltunnel] ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {mainPathExists}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                if (!mainPathExists)
                {
                    Log.Save($"[StartLocaltunnel] üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ...");
                    
                    string[] alternatePaths = {
                        Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "TebegramServer", "TebegramServer", "start_localtunnel.bat"),
                        Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TebegramServer", "TebegramServer", "start_localtunnel.bat"),
                        Path.Combine(Directory.GetCurrentDirectory(), "..", "TebegramServer", "TebegramServer", "start_localtunnel.bat"),
                        Path.Combine(Directory.GetCurrentDirectory(), "..", "..", "TebegramServer", "TebegramServer", "start_localtunnel.bat"),
                        @"c:\Users\makar\Documents\GitHub\Tebegram\Tebegrammmm\TebegramServer\TebegramServer\start_localtunnel.bat"
                    };
                    
                    Log.Save($"[StartLocaltunnel] üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º {alternatePaths.Length} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π:");
                    
                    for (int i = 0; i < alternatePaths.Length; i++)
                    {
                        string altPath = alternatePaths[i];
                        string fullAltPath = Path.GetFullPath(altPath);
                        bool altExists = File.Exists(fullAltPath);
                        
                        Log.Save($"[StartLocaltunnel] üìã –ü—É—Ç—å {i + 1}: {fullAltPath} - –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {altExists}");
                        
                        if (altExists)
                        {
                            batchPath = altPath;
                            fullBatchPath = fullAltPath;
                            Log.Save($"[StartLocaltunnel] üéØ –ù–ê–ô–î–ï–ù –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨: {fullBatchPath}");
                            break;
                        }
                    }
                }
                
                bool finalPathExists = File.Exists(fullBatchPath);
                Log.Save($"[StartLocaltunnel] üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {fullBatchPath}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {finalPathExists}");
                
                if (finalPathExists)
                {
                    Log.Save($"[StartLocaltunnel] üöÄ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...");
                    
                    DateTime processStartTime = DateTime.Now;
                    
                    ProcessStartInfo startInfo = new ProcessStartInfo()
                    {
                        FileName = fullBatchPath,
                        UseShellExecute = true,
                        CreateNoWindow = false,
                        WindowStyle = ProcessWindowStyle.Normal, // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ Normal –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                        WorkingDirectory = Path.GetDirectoryName(fullBatchPath)
                    };
                    
                    Log.Save($"[StartLocaltunnel] üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:");
                    Log.Save($"[StartLocaltunnel]   - FileName: {startInfo.FileName}");
                    Log.Save($"[StartLocaltunnel]   - WorkingDirectory: {startInfo.WorkingDirectory}");
                    Log.Save($"[StartLocaltunnel]   - UseShellExecute: {startInfo.UseShellExecute}");
                    
                    Log.Save($"[StartLocaltunnel] ‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ {processStartTime:HH:mm:ss.fff}...");
                    
                    localtunnelProcess = Process.Start(startInfo);
                    
                    DateTime processLaunchedTime = DateTime.Now;
                    TimeSpan launchDuration = processLaunchedTime - processStartTime;
                    
                    if (localtunnelProcess != null)
                    {
                        Log.Save($"[StartLocaltunnel] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
                        Log.Save($"[StartLocaltunnel] üî¢ PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {localtunnelProcess.Id}");
                        Log.Save($"[StartLocaltunnel] ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {launchDuration.TotalMilliseconds}ms");
                        Log.Save($"[StartLocaltunnel] üåê –û–∂–∏–¥–∞–µ–º—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL: http://tebegrammmm.loca.lt");
                        
                        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ localtunnel
                        Log.Save($"[StartLocaltunnel] ‚è≥ –û–∂–∏–¥–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç—É–Ω–Ω–µ–ª—è...");
                        DateTime waitStartTime = DateTime.Now;
                        
                        Thread.Sleep(5000);
                        
                        DateTime waitEndTime = DateTime.Now;
                        TimeSpan waitDuration = waitEndTime - waitStartTime;
                        Log.Save($"[StartLocaltunnel] ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {waitDuration.TotalMilliseconds}ms");
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        if (!localtunnelProcess.HasExited)
                        {
                            Log.Save($"[StartLocaltunnel] üíö –ü—Ä–æ—Ü–µ—Å—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç—É–Ω–Ω–µ–ª—è –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                        }
                        else
                        {
                            Log.Save($"[StartLocaltunnel] ‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç—É–Ω–Ω–µ–ª—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {localtunnelProcess.ExitCode}");
                        }
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—É–Ω–Ω–µ–ª—è
                        Log.Save($"[StartLocaltunnel] üïê –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É–Ω–Ω–µ–ª—è...");
                        StartTunnelMonitoring();
                    }
                    else
                    {
                        Log.Save($"[StartLocaltunnel] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Process.Start –≤–µ—Ä–Ω—É–ª null!");
                    }
                }
                else
                {
                    Log.Save($"[StartLocaltunnel] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª start_localtunnel.bat –ù–ï –ù–ê–ô–î–ï–ù!");
                    Log.Save($"[StartLocaltunnel] üìù –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—É—Ç—å: {fullBatchPath}");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    string directory = Path.GetDirectoryName(fullBatchPath);
                    bool dirExists = Directory.Exists(directory);
                    Log.Save($"[StartLocaltunnel] üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dirExists}");
                    
                    if (dirExists)
                    {
                        string[] filesInDir = Directory.GetFiles(directory);
                        Log.Save($"[StartLocaltunnel] üìÑ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({filesInDir.Length}):");
                        foreach (string file in filesInDir)
                        {
                            Log.Save($"[StartLocaltunnel]   - {Path.GetFileName(file)}");
                        }
                    }
                    
                    MessageBox.Show($"–§–∞–π–ª start_localtunnel.bat –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–ø–∫–µ.\n\n–û–∂–∏–¥–∞–µ–º–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: TebegramServer/TebegramServer/start_localtunnel.bat\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ localtunnel –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\nlt --port 5000 --subdomain tebegrammmm", 
                                  "LocalTunnel –Ω–µ –Ω–∞–π–¥–µ–Ω", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
                
                DateTime endTime = DateTime.Now;
                TimeSpan totalDuration = endTime - startTime;
                Log.Save($"[StartLocaltunnel] ‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {totalDuration.TotalMilliseconds}ms");
            }
            catch (Exception ex)
            {
                DateTime errorTime = DateTime.Now;
                Log.Save($"[StartLocaltunnel] ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –≤ {errorTime:HH:mm:ss.fff}: {ex.GetType().Name}");
                Log.Save($"[StartLocaltunnel] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {ex.Message}");
                Log.Save($"[StartLocaltunnel] üìö Stack trace: {ex.StackTrace}");
                
                if (ex.InnerException != null)
                {
                    Log.Save($"[StartLocaltunnel] üîó Inner exception: {ex.InnerException.Message}");
                }
                
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ localtunnel: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void StartTunnelMonitoring()
        {
            tunnelCheckTimer = new System.Timers.Timer(30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            tunnelCheckTimer.Elapsed += async (sender, e) => await CheckTunnelStatus();
            tunnelCheckTimer.AutoReset = true;
            tunnelCheckTimer.Start();
            Log.Save("[TunnelMonitoring] –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è");
        }

        private async Task CheckTunnelStatus()
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.Timeout = TimeSpan.FromSeconds(10);
                    try
                    {
                        HttpResponseMessage response = await client.GetAsync($"{serverAdress}/health");
                        if (response.IsSuccessStatusCode)
                        {
                            Log.Save("[TunnelCheck] –¢—É–Ω–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
                        }
                        else
                        {
                            Log.Save($"[TunnelCheck] –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç—É–Ω–Ω–µ–ª–µ–º: {response.StatusCode}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[TunnelCheck] –¢—É–Ω–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ex.Message}");
                        // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[TunnelCheck] Error: {ex.Message}");
            }
        }

        private void LoadStyle()
        {
            LinearGradientBrush LGB = (LinearGradientBrush)this.TryFindResource("ChatBackground");
            ResourceDictionary resourceDictionary = new ResourceDictionary();
            
            LBMessages.Background = LGB;
        }

        private void StartListener()
        {
            try
            {
                // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ localhost (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
                httpListener = new HttpListener();
                string prefix = $"http://localhost:{User.Port}/";
                httpListener.Prefixes.Add(prefix);
                httpListener.Start();
                IsRunning = true;
                Log.Save($"[StartListener] HTTP listener started on localhost:{User.Port}");
            }
            catch (Exception ex)
            {
                Log.Save($"[StartListener] Error: {ex.Message}");
                MessageBox.Show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫—Ä–∞—à –ª–æ–≥–∞—Ö");
            }
        }

        private void LBChatsLoders_SelectionChangeFolder(object sender, SelectionChangedEventArgs e)
        {
            if (LBChatsLoders.SelectedItem == null)
            {
                return;
            }
            LBChats.ItemsSource = (LBChatsLoders.SelectedItem as ChatFolder).Contacts;
        }
        
        private void LBChats_SelectionChangedChat(object sender, SelectionChangedEventArgs e)
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if (Contact != null && TBMessage != null)
            {
                Contact.Draft = TBMessage.Text;
                Log.Save($"[LBChats_SelectionChanged] Saved draft for {Contact.Name}: '{Contact.Draft}'");
            }

            if (LBChats.SelectedItem == null)
            {
                Log.Save("[LBChats_SelectionChanged] No item selected");
                return;
            }
            
            Contact = LBChats.SelectedItem as Contact;
            Log.Save($"[LBChats_SelectionChanged] Selected contact: {Contact?.Name} ({Contact?.IPAddress}:{Contact?.Port})");
            
            GridChat.DataContext = Contact;
            LBMessages.ItemsSource = Contact.Messages;
            GridMessege.Visibility = Visibility.Visible;
            GridContactPanel.Visibility = Visibility.Visible;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if (TBMessage != null)
            {
                TBMessage.Text = Contact.Draft ?? string.Empty;
                Log.Save($"[LBChats_SelectionChanged] Restored draft for {Contact.Name}: '{Contact.Draft}'");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            SaveLastSelectedContact(Contact.Name);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
            _ = NotifyServerOpenChat(Contact.Name);
        }

        void ReceiveMessage()
        {
            // –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            _ = StartPeriodicMessageCheck();
        }

        private async Task StartPeriodicMessageCheck()
        {
            try
            {
                Log.Save("[StartPeriodicMessageCheck] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
                
                while (IsRunning)
                {
                    await Task.Delay(5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    
                    try
                    {
                        await CheckForNewMessages();
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[StartPeriodicMessageCheck] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[StartPeriodicMessageCheck] Error: {ex.Message}");
            }
        }
        
        private async Task CheckForNewMessages()
        {
            try
            {
                using (HttpResponseMessage response = await httpClient.GetAsync($"{serverAdress}/messages/{User.Login}"))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        var messages = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, object>>>(json);
                        
                        if (messages != null && messages.Count > 0)
                        {
                            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
                            var newMessages = messages.Where(m => 
                            {
                                if (m.TryGetValue("SavedAt", out var savedAt) && DateTime.TryParse(savedAt?.ToString(), out var savedDate))
                                {
                                    return savedDate > DateTime.Now.AddMinutes(-1); // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
                                }
                                return false;
                            }).ToList();
                            
                            if (newMessages.Any())
                            {
                                Log.Save($"[CheckForNewMessages] –ù–∞–π–¥–µ–Ω–æ {newMessages.Count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
                                
                                foreach (var msgData in newMessages)
                                {
                                    await ProcessNewMessage(msgData);
                                }
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                this.Dispatcher.BeginInvoke(new Action(() =>
                                {
                                    if (Contact != null)
                                    {
                                        UpdateChatDisplay();
                                    }
                                }));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[CheckForNewMessages] Error: {ex.Message}");
            }
        }
        
        private async Task ProcessNewMessage(Dictionary<string, object> messageData)
        {
            try
            {
                string fromUser = messageData["FromUser"]?.ToString() ?? "";
                string toUser = messageData["ToUser"]?.ToString() ?? "";
                string messageText = messageData["Message"]?.ToString() ?? "";
                string timestamp = messageData["Timestamp"]?.ToString() ?? "";
                string messageType = messageData["MessageType"]?.ToString() ?? "Text";
                string statusString = messageData["Status"]?.ToString() ?? "Sent";

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                string contactLogin = fromUser == User.Login ? toUser : fromUser;
                string senderName = fromUser == User.Login ? User.Name : fromUser;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ—Ç –Ω–∞—Å)
                if (fromUser != User.Login)
                {
                    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ –∏–º–µ–Ω–∏
                    Contact? targetContact = null;
                    foreach (var folder in User.ChatsFolders)
                    {
                        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ Username (–ª–æ–≥–∏–Ω—É)
                        targetContact = folder.Contacts.FirstOrDefault(c => 
                            !string.IsNullOrEmpty(c.Username) && c.Username == contactLogin);
                        
                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Username, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏
                        if (targetContact == null)
                        {
                            targetContact = folder.Contacts.FirstOrDefault(c => c.Name == contactLogin);
                        }
                        
                        if (targetContact != null) 
                        {
                            break;
                        }
                    }

                    if (targetContact != null)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Ç–µ
                        bool messageExists = targetContact.Messages.Any(m => 
                            m.Text == messageText && 
                            m.Time == timestamp && 
                            m.Sender == senderName);
                        
                        if (!messageExists)
                        {
                            MessageType msgType = Enum.TryParse(messageType, out MessageType parsedType) ? parsedType : MessageType.Text;
                            MessageStatus msgStatus = Enum.TryParse(statusString, out MessageStatus parsedStatus) ? parsedStatus : MessageStatus.Sent;
                            
                            Message message = new Message(senderName, messageText, timestamp, msgType);
                            message.Status = msgStatus;
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤ UI thread
                            this.Dispatcher.BeginInvoke(new Action(() =>
                            {
                                targetContact.Messages.Add(message);
                            }));
                            
                            Log.Save($"[ProcessNewMessage] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {senderName} -> {targetContact.Name}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[ProcessNewMessage] Error: {ex.Message}");
            }
        }
        
        private async Task FetchMessagesFromServer()
        {
            try
            {
                // –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
                string url = $"{serverAdress}/messages?userId={User.Id}";
                HttpResponseMessage response = await httpClient.GetAsync(url);
                
                if (response.IsSuccessStatusCode)
                {
                    string messagesJson = await response.Content.ReadAsStringAsync();
                    ProcessMessagesFromServer(messagesJson);
                }
                else
                {
                    Log.Save($"[FetchMessagesFromServer] HTTP Error: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[FetchMessagesFromServer] Error: {ex.Message}");
            }
        }

        private void ProcessMessagesFromServer(string messagesData)
        {
            if (string.IsNullOrEmpty(messagesData))
                return;
                
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            string[] messages = messagesData.Split('\n');
            
            foreach (string messageData in messages)
            {
                if (string.IsNullOrEmpty(messageData))
                    continue;
                    
                string[] parts = messageData.Split('‚ñ´');
                
                // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                string senderUsername = parts[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ - –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                
                foreach (ChatFolder folder in User.ChatsFolders)
                {
                    foreach (Contact contact in folder.Contacts)
                    {
                        if (contact.Username == senderUsername || contact.Name == senderUsername)
                        {
                            // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            string messageText = parts[5];
                            string messageTime = parts[3];
                            
                            if (parts[2] == "Text")
                            {
                                Message message = new Message(contact.Name, messageText, messageTime);
                                this.Dispatcher.BeginInvoke(new Action(() =>
                                {
                                    contact.Messages.Add(message);
                                }));
                            }
                            else if (parts[2] == "File")
                            {
                                Message message = new Message(
                                    contact.Name, 
                                    messageText, 
                                    messageTime, 
                                    MessageType.File);
                                    
                                this.Dispatcher.BeginInvoke(new Action(() =>
                                {
                                    contact.Messages.Add(message);
                                }));
                            }
                            break;
                        }
                    }
                }
            }
        }

        private async Task<bool> CheckUserOnlineAsync(IPAddress ip, int port)
        {
            try
            {
                DateTime startTime = DateTime.Now;
                Log.Save($"[CheckUserOnline] ‚è±Ô∏è –°–¢–ê–†–¢ –ü–†–û–í–ï–†–ö–ò –û–ù–õ–ê–ô–ù –°–¢–ê–¢–£–°–ê: {startTime:HH:mm:ss.fff}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
                string userToCheck = Contact?.Username ?? Contact?.Name ?? "unknown";
                Log.Save($"[CheckUserOnline] üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {userToCheck}");
                Log.Save($"[CheckUserOnline] üìã Contact.Username: {Contact?.Username ?? "null"}");
                Log.Save($"[CheckUserOnline] üìã Contact.Name: {Contact?.Name ?? "null"}");
                
                string url = $"{serverAdress}/users/online?user={userToCheck}";
                Log.Save($"[CheckUserOnline] üåê URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {url}");
                Log.Save($"[CheckUserOnline] üîó –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {serverAdress}");
                
                using (var client = new HttpClient())
                {
                    DateTime clientCreateTime = DateTime.Now;
                    TimeSpan clientCreateDuration = clientCreateTime - startTime;
                    Log.Save($"[CheckUserOnline] üîß HttpClient —Å–æ–∑–¥–∞–Ω –∑–∞ {clientCreateDuration.TotalMilliseconds}ms");
                    
                    client.Timeout = TimeSpan.FromMilliseconds(2000);
                    Log.Save($"[CheckUserOnline] ‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 2000ms");
                    
                    try
                    {
                        DateTime requestStartTime = DateTime.Now;
                        Log.Save($"[CheckUserOnline] üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –≤ {requestStartTime:HH:mm:ss.fff}");
                        
                        HttpResponseMessage response = await client.GetAsync(url);
                        
                        DateTime requestEndTime = DateTime.Now;
                        TimeSpan requestDuration = requestEndTime - requestStartTime;
                        Log.Save($"[CheckUserOnline] ‚è±Ô∏è GET –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {requestDuration.TotalMilliseconds}ms");
                        
                        Log.Save($"[CheckUserOnline] üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {(int)response.StatusCode} {response.StatusCode}");
                        Log.Save($"[CheckUserOnline] üè∑Ô∏è Reason phrase: {response.ReasonPhrase ?? "–ø—É—Å—Ç–æ"}");
                        
                        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                        Log.Save($"[CheckUserOnline] üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:");
                        foreach (var header in response.Headers)
                        {
                            Log.Save($"[CheckUserOnline]   {header.Key}: {string.Join(", ", header.Value)}");
                        }
                        
                        if (response.IsSuccessStatusCode)
                        {
                            DateTime readStartTime = DateTime.Now;
                            string responseText = await response.Content.ReadAsStringAsync();
                            DateTime readEndTime = DateTime.Now;
                            TimeSpan readDuration = readEndTime - readStartTime;
                            
                            Log.Save($"[CheckUserOnline] üìñ –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {readDuration.TotalMilliseconds}ms");
                            Log.Save($"[CheckUserOnline] üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: '{responseText}'");
                            Log.Save($"[CheckUserOnline] üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {responseText.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                            
                            DateTime parseStartTime = DateTime.Now;
                            bool isOnline = bool.TryParse(responseText, out bool result) && result;
                            DateTime parseEndTime = DateTime.Now;
                            TimeSpan parseDuration = parseEndTime - parseStartTime;
                            
                            Log.Save($"[CheckUserOnline] üî¢ –ü–∞—Ä—Å–∏–Ω–≥ bool –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {parseDuration.TotalMilliseconds}ms");
                            Log.Save($"[CheckUserOnline] ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userToCheck} –æ–Ω–ª–∞–π–Ω: {isOnline}");
                            
                            DateTime totalEndTime = DateTime.Now;
                            TimeSpan totalDuration = totalEndTime - startTime;
                            Log.Save($"[CheckUserOnline] ‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –ü–†–û–í–ï–†–ö–ò: {totalDuration.TotalMilliseconds}ms");
                            
                            return isOnline;
                        }
                        else
                        {
                            Log.Save($"[CheckUserOnline] ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.StatusCode}");
                            
                            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏
                            try
                            {
                                string errorContent = await response.Content.ReadAsStringAsync();
                                Log.Save($"[CheckUserOnline] üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏: {errorContent}");
                            }
                            catch (Exception readEx)
                            {
                                Log.Save($"[CheckUserOnline] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏: {readEx.Message}");
                            }
                        }
                    }
                    catch (TaskCanceledException tcEx)
                    {
                        DateTime timeoutTime = DateTime.Now;
                        TimeSpan timeoutDuration = timeoutTime - startTime;
                        Log.Save($"[CheckUserOnline] ‚è∞ –¢–ê–ô–ú–ê–£–¢ —á–µ—Ä–µ–∑ {timeoutDuration.TotalMilliseconds}ms");
                        Log.Save($"[CheckUserOnline] ‚ùå TaskCanceledException: {tcEx.Message}");
                        
                        if (tcEx.CancellationToken.IsCancellationRequested)
                        {
                            Log.Save($"[CheckUserOnline] üö´ –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (—Ç–∞–π–º–∞—É—Ç)");
                        }
                    }
                    catch (HttpRequestException httpEx)
                    {
                        DateTime httpErrorTime = DateTime.Now;
                        TimeSpan httpErrorDuration = httpErrorTime - startTime;
                        Log.Save($"[CheckUserOnline] üåê HTTP –û–®–ò–ë–ö–ê —á–µ—Ä–µ–∑ {httpErrorDuration.TotalMilliseconds}ms");
                        Log.Save($"[CheckUserOnline] ‚ùå HttpRequestException: {httpEx.Message}");
                        
                        if (httpEx.InnerException != null)
                        {
                            Log.Save($"[CheckUserOnline] üîó Inner exception: {httpEx.InnerException.Message}");
                        }
                    }
                    catch (Exception ex)
                    {
                        DateTime generalErrorTime = DateTime.Now;
                        TimeSpan generalErrorDuration = generalErrorTime - startTime;
                        Log.Save($"[CheckUserOnline] ‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê —á–µ—Ä–µ–∑ {generalErrorDuration.TotalMilliseconds}ms");
                        Log.Save($"[CheckUserOnline] üìÑ –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {ex.GetType().Name}");
                        Log.Save($"[CheckUserOnline] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {ex.Message}");
                        Log.Save($"[CheckUserOnline] üìö Stack trace: {ex.StackTrace}");
                    }
                }
                
                Log.Save($"[CheckUserOnline] ‚ùå –í–û–ó–í–†–ê–©–ê–ï–ú FALSE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)");
                return false;
            }
            catch (Exception ex) 
            { 
                DateTime criticalErrorTime = DateTime.Now;
                Log.Save($"[CheckUserOnline] üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {criticalErrorTime:HH:mm:ss.fff}");
                Log.Save($"[CheckUserOnline] üìÑ –¢–∏–ø: {ex.GetType().Name}");
                Log.Save($"[CheckUserOnline] üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {ex.Message}");
                Log.Save($"[CheckUserOnline] üìö Stack trace: {ex.StackTrace}");
                return false; 
            }
        }

        private async Task SendMessageToUserAsync(Message message)
        {
            try
            {
                DateTime startTime = DateTime.Now;
                Log.Save($"[SendMessageToUser] ‚è±Ô∏è –°–¢–ê–†–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø: {startTime:HH:mm:ss.fff}");
                Log.Save($"[SendMessageToUser] üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {User.Login}");
                Log.Save($"[SendMessageToUser] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message.Text}'");
                Log.Save($"[SendMessageToUser] üè∑Ô∏è –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.MessageType}");
                Log.Save($"[SendMessageToUser] ‚è∞ –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message.Time}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (Contact == null)
                {
                    Log.Save($"[SendMessageToUser] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Contact is null");
                    MessageBox.Show("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è");
                    return;
                }

                Log.Save($"[SendMessageToUser] üë• –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {Contact.Name}");
                Log.Save($"[SendMessageToUser] üÜî Username –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {Contact.Username ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}");
                Log.Save($"[SendMessageToUser] ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");

                // –í—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Sent
                message.Status = MessageStatus.Sent;
                Log.Save($"[SendMessageToUser] üè∑Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è: {message.Status}");

                DateTime saveStartTime = DateTime.Now;
                Log.Save($"[SendMessageToUser] üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ {saveStartTime:HH:mm:ss.fff}...");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –°–†–ê–ó–£ - —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ–±—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
                await SaveMessageToServer(message);
                
                DateTime saveEndTime = DateTime.Now;
                TimeSpan saveDuration = saveEndTime - saveStartTime;
                Log.Save($"[SendMessageToUser] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {saveDuration.TotalMilliseconds}ms");

                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
                string toUserValue = !string.IsNullOrEmpty(Contact.Username) ? Contact.Username : Contact.Name;
                
                var messageData = new
                {
                    fromUser = User.Login,
                    toUser = toUserValue,
                    message = message.Text,
                    timestamp = message.Time,
                    messageType = message.MessageType.ToString(),
                    status = message.Status.ToString()
                };

                Log.Save($"[SendMessageToUser] üìã –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:");
                Log.Save($"[SendMessageToUser]   fromUser: {messageData.fromUser}");
                Log.Save($"[SendMessageToUser]   toUser: {messageData.toUser}");
                Log.Save($"[SendMessageToUser]   message: {messageData.message}");
                Log.Save($"[SendMessageToUser]   timestamp: {messageData.timestamp}");
                Log.Save($"[SendMessageToUser]   messageType: {messageData.messageType}");
                Log.Save($"[SendMessageToUser]   status: {messageData.status}");

                DateTime serializeStartTime = DateTime.Now;
                string json = System.Text.Json.JsonSerializer.Serialize(messageData);
                DateTime serializeEndTime = DateTime.Now;
                TimeSpan serializeDuration = serializeEndTime - serializeStartTime;
                
                Log.Save($"[SendMessageToUser] üìÑ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {serializeDuration.TotalMilliseconds}ms");
                Log.Save($"[SendMessageToUser] üìÑ JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {json}");

                StringContent content = new StringContent(json, Encoding.UTF8, "application/json");
                Log.Save($"[SendMessageToUser] üì¶ StringContent —Å–æ–∑–¥–∞–Ω —Å encoding: UTF8, content-type: application/json");

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (localtunnel)
                string endpointUrl = $"{serverAdress}/messages/send";
                Log.Save($"[SendMessageToUser] üåê –¶–µ–ª–µ–≤–æ–π URL: {endpointUrl}");
                Log.Save($"[SendMessageToUser] üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {serverAdress}");
                
                try
                {
                    DateTime httpStartTime = DateTime.Now;
                    Log.Save($"[HTTP] üöÄ –ù–ê–ß–ò–ù–ê–ï–ú HTTP POST –∑–∞–ø—Ä–æ—Å –≤ {httpStartTime:HH:mm:ss.fff}");
                    Log.Save($"[HTTP] üìç URL: {endpointUrl}");
                    Log.Save($"[HTTP] üìÑ Content-Type: application/json");
                    Log.Save($"[HTTP] üìè –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {json.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                    
                    using (HttpResponseMessage response = await httpClient.PostAsync(endpointUrl, content))
                    {
                        DateTime httpEndTime = DateTime.Now;
                        TimeSpan httpDuration = httpEndTime - httpStartTime;
                        
                        Log.Save($"[HTTP] ‚è±Ô∏è HTTP –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {httpDuration.TotalMilliseconds}ms");
                        Log.Save($"[HTTP] üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {(int)response.StatusCode} {response.StatusCode}");
                        Log.Save($"[HTTP] üè∑Ô∏è Reason phrase: {response.ReasonPhrase ?? "–ø—É—Å—Ç–æ"}");
                        
                        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
                        string responseContent = "";
                        try
                        {
                            DateTime readStartTime = DateTime.Now;
                            responseContent = await response.Content.ReadAsStringAsync();
                            DateTime readEndTime = DateTime.Now;
                            TimeSpan readDuration = readEndTime - readStartTime;
                            
                            Log.Save($"[HTTP] üìñ –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {readDuration.TotalMilliseconds}ms");
                            Log.Save($"[HTTP] üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {responseContent}");
                            Log.Save($"[HTTP] üìè –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {responseContent.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                        }
                        catch (Exception readEx)
                        {
                            Log.Save($"[HTTP] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {readEx.Message}");
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                        Log.Save($"[HTTP] üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:");
                        foreach (var header in response.Headers)
                        {
                            Log.Save($"[HTTP]   {header.Key}: {string.Join(", ", header.Value)}");
                        }
                        
                        if (response.IsSuccessStatusCode)
                        {
                            Log.Save($"[HTTP] ‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {Contact.Name}");
                        }
                        else
                        {
                            Log.Save($"[HTTP] ‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {Contact.Name}");
                            Log.Save($"[HTTP] üî¢ –ö–æ–¥ –æ—à–∏–±–∫–∏: {(int)response.StatusCode} {response.StatusCode}");
                            Log.Save($"[HTTP] üìù –û–ø–∏—Å–∞–Ω–∏–µ: {response.ReasonPhrase}");
                            Log.Save($"[HTTP] üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: {responseContent}");
                        }
                    }
                }
                catch (Exception httpEx)
                {
                    Log.Save($"[HTTP] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {httpEx.Message}");
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                UpdateChatDisplay();
            }
            catch (Exception ex)
            {
                Log.Save($"[SendMessageToUser] Error: {ex.Message}");
            }
        }

        private void SaveMessageToFile(string ContactName, string messageData, bool IsMe = true)
        {
            try
            {
                string[] MessegeData = messageData.Split('‚ñ´');
                string MessegeDataInFile = $"{MessegeData[0]}‚ñ´{MessegeData[1]}‚ñ´{ContactName}‚ñ´{MessegeData[2]}‚ñ´{MessegeData[3]}‚ñ´{MessegeData[4]}‚ñ´{MessegeData[5]}";

                string userId = User.Id.ToString();
                string dataFolder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data");

                if (!Directory.Exists(dataFolder))
                {
                    Directory.CreateDirectory(dataFolder);
                }

                string userFolder = Path.Combine(dataFolder, userId);
                if (!Directory.Exists(userFolder))
                {
                    Directory.CreateDirectory(userFolder);
                }
                string ContactFolder;
                if (IsMe)
                {
                    ContactFolder = Path.Combine(userFolder, Contact.Name);
                }
                else
                {
                    ContactFolder = Path.Combine(userFolder, ContactName);
                }

                if (!Directory.Exists(ContactFolder))
                {
                    Directory.CreateDirectory(ContactFolder);
                }
                DateTime dateTime = DateTime.Now;

                string fileName = $"{dateTime.ToString("dd.MM.yyyy")}.txt";
                string filePath = Path.Combine(ContactFolder, fileName);

                StringBuilder sb = new StringBuilder();
                sb.AppendLine(MessegeDataInFile);
                lock (thisLock)
                {
                    File.AppendAllText(filePath, sb.ToString(), Encoding.UTF8);
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[SaveMessageToFile] Error: {ex.Message}");
                MessageBox.Show("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫—Ä–∞—à –ª–æ–≥–∞—Ö");
            }
        }
        
        private async Task SaveMessageToServer(Message message)
        {
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Username –≤–º–µ—Å—Ç–æ Name –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                string toUserLogin = !string.IsNullOrEmpty(Contact.Username) ? Contact.Username : Contact.Name;
                
                var messageData = new
                {
                    fromUser = User.Login,
                    toUser = toUserLogin,
                    message = message.Text,
                    timestamp = message.Time,
                    messageType = message.MessageType.ToString(),
                    status = message.Status.ToString()
                };

                string json = System.Text.Json.JsonSerializer.Serialize(messageData);
                StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

                using (HttpResponseMessage response = await httpClient.PostAsync($"{serverAdress}/messages/save", content))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        Log.Save($"[SaveMessageToServer] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è {toUserLogin}");
                    }
                    else
                    {
                        Log.Save($"[SaveMessageToServer] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {response.StatusCode}");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[SaveMessageToServer] Error: {ex.Message}");
            }
        }

        private async void SendMessage(string message, MessageType messageType = MessageType.Text, string? ServerFilePath = null)
        {
            Log.Save($"[SendMessage] Starting send message: '{message}' to contact: {Contact?.Name}");
            
            if (string.IsNullOrWhiteSpace(message))
            {
                TBMessage.Text = string.Empty;
                return;
            }

            if (Contact == null)
            {
                MessageBox.Show("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è");
                Log.Save("[SendMessage] Error: Contact is null");
                return;
            }

            Message Message = new Message(User.Name, message, DateTime.Now.ToString("hh:mm"), messageType);
            Contact.Messages.Add(Message);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            UpdateChatDisplay();
            
            Log.Save($"[SendMessage] Message added to local contact. Sending to user...");
            await SendMessageToUserAsync(Message);
            TBMessage.Text = string.Empty;
            Contact.Draft = string.Empty; // –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }

        private void Button_Click_SendMessage(object sender, RoutedEventArgs e)
        {
            Log.Save($"[Button_Click_SendMessage] Button clicked. Selected item: {LBChats.SelectedItem?.GetType()?.Name}");
            
            if (LBChats.SelectedItem == null)
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
                Log.Save("[Button_Click_SendMessage] No chat selected");
                return;
            }
            
            Log.Save($"[Button_Click_SendMessage] Sending message: '{TBMessage.Text}'");
            SendMessage(TBMessage.Text);
            TBMessage.Focus();
        }
        
        private void TBMessage_KeyDown_SendMessage(object sender, KeyEventArgs e)
        {
            if (LBChats.SelectedItem == null)
            {
                return;
            }
            if (e.Key == Key.Enter)
            {
                SendMessage(TBMessage.Text);
            }
        }

        private void Button_Click_AddContact(object sender, RoutedEventArgs e)
        {
            Contact newContact = new Contact();
            AddContact addContact = new AddContact(newContact, "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");

            if (addContact.ShowDialog() == true)
            {
                User.ChatsFolders[0].Contacts.Add(newContact);
            }
        }
        
        private void Button_Click_RemoveContact(object sender, RoutedEventArgs e)
        {
            GridContactPanel.Visibility = Visibility.Hidden;
            GridMessege.Visibility = Visibility.Hidden;
            Contact contact = (LBChats.SelectedItem as Contact);
            for (int i = 0; i < User.ChatsFolders.Count; i++)
            {
                for (int j = 0; j < User.ChatsFolders[i].Contacts.Count; j++)
                {
                    if (User.ChatsFolders[i].Contacts[j].Name == contact.Name)
                    {
                        User.ChatsFolders[i].Contacts.RemoveAt(j);
                    }
                }
            }
        }

        private void Button_Click_ContactRedact(object sender, RoutedEventArgs e)
        {
            if (LBChats.SelectedItem == null)
            {
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            string oldName = Contact.Name;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
            EditContactNameWindow editWindow = new EditContactNameWindow(Contact);

            if (editWindow.ShowDialog() == true)
            {
                // –ò–∑–º–µ–Ω—è–µ–º –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–µ
                Contact.ChangeName(editWindow.NewName);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                SaveContactNameChange(Contact, oldName, Contact.Name);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                User.ChatsFolders[0].RemoveContact(Contact);
                User.ChatsFolders[0].AddContact(Contact);
                LBChats.SelectedIndex = LBChats.Items.Count - 1;
                GridChat.DataContext = Contact;
                TBChat_Name.Text = Contact.Name;
                
                MessageBox.Show("–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ");
                Log.Save($"[ContactEdit] –ö–æ–Ω—Ç–∞–∫—Ç –∏–∑–º–µ–Ω–µ–Ω: {oldName} -> {Contact.Name}");
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            IsRunning = false;
            
            if (httpListener != null && httpListener.IsListening)
            {
                httpListener.Stop();
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º localtunnel –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            StopLocaltunnel();
            
            Process.GetCurrentProcess().Kill();
        }

        private void StopLocaltunnel()
        {
            try
            {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if (tunnelCheckTimer != null)
                {
                    tunnelCheckTimer.Stop();
                    tunnelCheckTimer.Dispose();
                }

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å localtunnel
                if (localtunnelProcess != null && !localtunnelProcess.HasExited)
                {
                    try
                    {
                        localtunnelProcess.Kill();
                        localtunnelProcess.WaitForExit(2000);
                        Log.Save($"[StopLocaltunnel] –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å localtunnel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[StopLocaltunnel] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {ex.Message}");
                    }
                }

                // –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã localtunnel
                Process[] ltProcesses = Process.GetProcessesByName("lt");
                foreach (Process proc in ltProcesses)
                {
                    try
                    {
                        proc.Kill();
                        proc.WaitForExit(2000);
                        Log.Save($"[StopLocaltunnel] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å localtunnel (PID: {proc.Id})");
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[StopLocaltunnel] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.Id}: {ex.Message}");
                    }
                }
                
                // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã node.js (localtunnel —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Node.js)
                Process[] nodeProcesses = Process.GetProcessesByName("node");
                foreach (Process proc in nodeProcesses)
                {
                    try
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å localtunnel
                        if (proc.MainModule?.FileName?.Contains("localtunnel") == true || 
                            proc.StartInfo.Arguments?.Contains("localtunnel") == true)
                        {
                            proc.Kill();
                            proc.WaitForExit(2000);
                            Log.Save($"[StopLocaltunnel] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å node localtunnel (PID: {proc.Id})");
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[StopLocaltunnel] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ node –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.Id}: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[StopLocaltunnel] Error: {ex.Message}");
            }
        }

        private void Button_Click_FoldersMenu(object sender, RoutedEventArgs e)
        {
            RedactcionChatsFoldersWindow RCFW = new RedactcionChatsFoldersWindow(User.ChatsFolders);
            RCFW.ShowDialog();
        }
        
        private async Task SendFileToServer(string filePath)
        {
            string mimeType = MIME.GetMimeType(Path.GetExtension(filePath));
            if (mimeType == "application/octet-stream")
            {
                MessageBox.Show("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞");
                return;
            }

            using var multipar = new MultipartFormDataContent();
            var fileStream = new StreamContent(File.OpenRead(filePath));
            fileStream.Headers.ContentType = new MediaTypeHeaderValue(mimeType);
            multipar.Add(fileStream, name: "file", fileName: Path.GetFileName(filePath));

            using var response = await httpClient.PostAsync($"{serverAdress}/upload", multipar);
            var ResponseText = await response.Content.ReadAsStringAsync();
            this.Dispatcher.Invoke(new Action(() => { SendMessage(Path.GetFileName(filePath), MessageType.File, $"{serverAdress}/upload/{Path.GetFileName(filePath)}"); }));
            MessageBox.Show(ResponseText);
        }
        
        private async void Button_Click_SelectFile(object sender, RoutedEventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();

            if (fileDialog.ShowDialog() != true)
            {
                return;
            }
            else if (string.IsNullOrEmpty(fileDialog.FileName))
            {
                return;
            }

            await SendFileToServer(fileDialog.FileName);
        }

        private async void LBMessages_SelectionChangeMessage(object sender, SelectionChangedEventArgs e)
        {
            if (LBMessages.SelectedItem == null)
            {
                LBMessages.SelectedIndex = -1;
                return;
            }
            else if ((LBMessages.SelectedItem as Message).MessageType == MessageType.File)
            {
                OpenFolderDialog openFolderDialog = new OpenFolderDialog();

                if (openFolderDialog.ShowDialog() != true || string.IsNullOrWhiteSpace(openFolderDialog.FolderName))
                {
                    MessageBox.Show("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
                    return;
                }

                string fileName = (LBMessages.SelectedItem as Message).Text;
                var fileUrl = $"{serverAdress}/upload/{fileName}";

                try
                {
                    using var response = await httpClient.GetStreamAsync(fileUrl);
                    using var fs = new FileStream($"{openFolderDialog.FolderName}/{fileName}", FileMode.OpenOrCreate);
                    await response.CopyToAsync(fs);

                    MessageBox.Show($"–§–∞–π–ª {fileName} —Å–∫–∞—á–µ–Ω");
                }
                catch (Exception ex)
                {
                    Log.Save($"[LBMessages_SelectionChangeMessage] Error: {ex.Message}");
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Ç –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫—Ä–∞—à –ª–æ–≥–∞—Ö");
                }
            }
        }

        private void Button_Click_Settings(object sender, RoutedEventArgs e)
        {
            SettingsPanelWindow SPW = new SettingsPanelWindow(User);
            SPW.ShowDialog();
        }

        private async Task LoadMessageHistoryAsync()
        {
            try
            {
                Log.Save($"[LoadMessageHistory] –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {User.Login}");
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                foreach (var folder in User.ChatsFolders)
                {
                    foreach (var contact in folder.Contacts)
                    {
                        contact.Messages.Clear();
                    }
                }
                Log.Save($"[LoadMessageHistory] –û—á–∏—â–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏");
                
                using (HttpResponseMessage response = await httpClient.GetAsync($"{serverAdress}/messages/{User.Login}"))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        var messages = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, object>>>(json);
                        
                        if (messages != null && messages.Count > 0)
                        {
                            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                            messages = messages.OrderBy(m => 
                            {
                                if (m.TryGetValue("SavedAt", out var savedAt) && DateTime.TryParse(savedAt?.ToString(), out var date))
                                    return date;
                                return DateTime.MinValue;
                            }).ToList();

                            foreach (var msgData in messages)
                            {
                                await RestoreMessageFromServer(msgData);
                            }
                            Log.Save($"[LoadMessageHistory] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {messages.Count} —Å–æ–æ–±—â–µ–Ω–∏–π");
                            
                            // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                            await UpdateUserLastActivity();
                        }
                        else
                        {
                            Log.Save($"[LoadMessageHistory] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                            // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            await UpdateUserLastActivity();
                        }
                    }
                    else
                    {
                        Log.Save($"[LoadMessageHistory] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {response.StatusCode}");
                    }
                }
                
                // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
                this.Dispatcher.BeginInvoke(new Action(async () => {
                    RestoreLastSelectedContact();
                }));
            }
            catch (Exception ex)
            {
                Log.Save($"[LoadMessageHistory] Error: {ex.Message}");
            }
        }

        private Task RestoreMessageFromServer(Dictionary<string, object> messageData)
        {
            try
            {
                string fromUser = messageData["FromUser"]?.ToString() ?? "";
                string toUser = messageData["ToUser"]?.ToString() ?? "";
                string messageText = messageData["Message"]?.ToString() ?? "";
                string timestamp = messageData["Timestamp"]?.ToString() ?? "";
                string messageType = messageData["MessageType"]?.ToString() ?? "Text";
                string statusString = messageData["Status"]?.ToString() ?? "Sent";

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                string contactLogin = fromUser == User.Login ? toUser : fromUser;
                string senderName = fromUser == User.Login ? User.Name : fromUser;

                Log.Save($"[RestoreMessage] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {fromUser} -> {toUser}");

                // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ –∏–º–µ–Ω–∏
                Contact? targetContact = null;
                foreach (var folder in User.ChatsFolders)
                {
                    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ Username (–ª–æ–≥–∏–Ω—É)
                    targetContact = folder.Contacts.FirstOrDefault(c => 
                        !string.IsNullOrEmpty(c.Username) && c.Username == contactLogin);
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Username, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏
                    if (targetContact == null)
                    {
                        targetContact = folder.Contacts.FirstOrDefault(c => c.Name == contactLogin);
                    }
                    
                    if (targetContact != null) 
                    {
                        Log.Save($"[RestoreMessage] –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {targetContact.Name} (Username: {targetContact.Username})");
                        break;
                    }
                }

                if (targetContact != null)
                {
                    MessageType msgType = Enum.TryParse(messageType, out MessageType parsedType) ? parsedType : MessageType.Text;
                    MessageStatus msgStatus = Enum.TryParse(statusString, out MessageStatus parsedStatus) ? parsedStatus : MessageStatus.Sent;
                    
                    Message message = new Message(senderName, messageText, timestamp, msgType);
                    message.Status = msgStatus;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ UI thread
                    this.Dispatcher.BeginInvoke(new Action(() =>
                    {
                        targetContact.Messages.Add(message);
                        if (Contact == targetContact)
                        {
                            UpdateChatDisplay();
                        }
                    }));
                    
                    Log.Save($"[RestoreMessage] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {senderName} -> {targetContact.Name}");
                }
                else
                {
                    Log.Save($"[RestoreMessage] –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ–≥–∏–Ω–∞: {contactLogin}");
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[RestoreMessage] Error: {ex.Message}");
            }
            
            return Task.CompletedTask;
        }

        private void UpdateChatDisplay()
        {
            if (Contact != null)
            {
                LBMessages.ItemsSource = null;
                LBMessages.ItemsSource = Contact.Messages;
                Log.Save($"[UpdateChatDisplay] –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –¥–ª—è {Contact.Name} - –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {Contact.Messages.Count}");
            }
        }

        private void SaveContactNameChange(Contact contact, string oldName, string newName)
        {
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                Log.Save($"[SaveContactNameChange] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {oldName} -> {newName}");
                
                // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            }
            catch (Exception ex)
            {
                Log.Save($"[SaveContactNameChange] Error: {ex.Message}");
            }
        }

        private void SaveLastSelectedContact(string contactName)
        {
            try
            {
                string settingsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Settings");
                if (!Directory.Exists(settingsPath))
                {
                    Directory.CreateDirectory(settingsPath);
                }
                
                string userSettingsFile = Path.Combine(settingsPath, $"{User.Login}_settings.txt");
                File.WriteAllText(userSettingsFile, $"LastSelectedContact:{contactName}");
                Log.Save($"[SaveLastSelectedContact] –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contactName}");
            }
            catch (Exception ex)
            {
                Log.Save($"[SaveLastSelectedContact] Error: {ex.Message}");
            }
        }
        
        private string LoadLastSelectedContact()
        {
            try
            {
                string settingsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Settings");
                string userSettingsFile = Path.Combine(settingsPath, $"{User.Login}_settings.txt");
                
                if (File.Exists(userSettingsFile))
                {
                    string content = File.ReadAllText(userSettingsFile);
                    if (content.StartsWith("LastSelectedContact:"))
                    {
                        string contactName = content.Substring("LastSelectedContact:".Length);
                        Log.Save($"[LoadLastSelectedContact] –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contactName}");
                        return contactName;
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[LoadLastSelectedContact] Error: {ex.Message}");
            }
            return "";
        }

        private void RestoreLastSelectedContact()
        {
            try
            {
                if (!string.IsNullOrEmpty(lastSelectedContactName))
                {
                    // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∏–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
                    foreach (var folder in User.ChatsFolders)
                    {
                        var contact = folder.Contacts.FirstOrDefault(c => c.Name == lastSelectedContactName);
                        if (contact != null)
                        {
                            // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
                            LBChats.SelectedItem = contact;
                            Log.Save($"[RestoreLastSelectedContact] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞: {lastSelectedContactName}");
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[RestoreLastSelectedContact] Error: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        /// </summary>
        private static string GetServerAddress()
        {
            try
            {
                Log.Save($"[GetServerAddress] üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...");
                
                // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª—É —Å URL —Ç—É–Ω–Ω–µ–ª—è
                List<string> possiblePaths = new List<string>
                {
                    // –í –ø–∞–ø–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç–∫—É–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç—É–Ω–Ω–µ–ª—å)
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "TebegramServer", "TebegramServer", "tunnel_url.txt"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "tunnel_url.txt"),
                    
                    // –í —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Tebegram", "tunnel_url.txt"),
                    Path.Combine(Environment.GetEnvironmentVariable("TEMP") ?? "", "tebegram_tunnel_url.txt"),
                    
                    // –í —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ
                    "tunnel_url.txt"
                };

                Log.Save($"[GetServerAddress] üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º {possiblePaths.Count} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π —Ñ–∞–π–ª–∞ URL...");

                foreach (string path in possiblePaths)
                {
                    try
                    {
                        string fullPath = Path.GetFullPath(path);
                        Log.Save($"[GetServerAddress] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {fullPath}");
                        
                        if (File.Exists(fullPath))
                        {
                            string tunnelUrl = File.ReadAllText(fullPath).Trim();
                            if (!string.IsNullOrEmpty(tunnelUrl) && tunnelUrl.StartsWith("http"))
                            {
                                // –ü—Ä–∏–≤–æ–¥–∏–º –∫ HTTP –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª HTTPS
                                if (tunnelUrl.StartsWith("https://"))
                                {
                                    tunnelUrl = tunnelUrl.Replace("https://", "http://");
                                    Log.Save($"[GetServerAddress] üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω HTTPS -> HTTP: {tunnelUrl}");
                                }
                                
                                Log.Save($"[GetServerAddress] ‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–π—Å—Ç–≤—É—é—â–∏–π URL —Ç—É–Ω–Ω–µ–ª—è: {tunnelUrl}");
                                return tunnelUrl;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[GetServerAddress] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ {path}: {ex.Message}");
                    }
                }

                // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                List<string> fallbackUrls = new List<string>
                {
                    "http://tebegrammmm.loca.lt",
                    "http://tebegram-server.loca.lt", 
                    "http://tebegram-chat.loca.lt",
                    "http://localhost:5000" // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                };

                Log.Save($"[GetServerAddress] üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞...");

                foreach (string url in fallbackUrls)
                {
                    try
                    {
                        Log.Save($"[GetServerAddress] üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {url}");
                        
                        using (var client = new HttpClient())
                        {
                            client.Timeout = TimeSpan.FromSeconds(5);
                            var response = client.GetAsync($"{url}/health").Result;
                            
                            if (response.IsSuccessStatusCode)
                            {
                                Log.Save($"[GetServerAddress] ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {url}");
                                return url;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Save($"[GetServerAddress] ‚ùå {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ex.Message}");
                    }
                }

                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                string defaultUrl = "http://tebegrammmm.loca.lt";
                Log.Save($"[GetServerAddress] ‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π: {defaultUrl}");
                return defaultUrl;
            }
            catch (Exception ex)
            {
                Log.Save($"[GetServerAddress] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
                return "http://tebegrammmm.loca.lt"; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å
            }
        }

        /// <summary>
        /// –£–≤–µ–¥–æ–º–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        /// </summary>
        private async Task NotifyServerOpenChat(string contactName)
        {
            try
            {
                Log.Save($"[NotifyServerOpenChat] üì¢ –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å {contactName}");
                
                var data = new
                {
                    user = User.Login,
                    chatWith = contactName,
                    timestamp = DateTime.Now.ToString("o")
                };

                string json = System.Text.Json.JsonSerializer.Serialize(data);
                StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

                using (HttpResponseMessage response = await httpClient.PostAsync($"{serverAdress}/users/open-chat", content))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        Log.Save($"[NotifyServerOpenChat] ‚úÖ –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å {contactName}");
                    }
                    else
                    {
                        Log.Save($"[NotifyServerOpenChat] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {response.StatusCode}");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[NotifyServerOpenChat] ‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        /// </summary>
        private async Task UpdateUserLastActivity()
        {
            try
            {
                Log.Save($"[UpdateUserLastActivity] ‚è∞ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {User.Login}");
                
                var data = new
                {
                    user = User.Login,
                    lastActivity = DateTime.Now.ToString("o"),
                    action = "message_check"
                };

                string json = System.Text.Json.JsonSerializer.Serialize(data);
                StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

                using (HttpResponseMessage response = await httpClient.PostAsync($"{serverAdress}/users/update-activity", content))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        Log.Save($"[UpdateUserLastActivity] ‚úÖ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                    }
                    else
                    {
                        Log.Save($"[UpdateUserLastActivity] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {response.StatusCode}");
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Save($"[UpdateUserLastActivity] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {ex.Message}");
            }
        }
    }
}
